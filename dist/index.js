!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.resolveLnk=t():e.resolveLnk=t()}(global,(function(){return function(e){var t={};function n(i){if(t[i])return t[i].exports;var s=t[i]={i:i,l:!1,exports:{}};return e[i].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(i,s,function(t){return e[t]}.bind(null,s));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t){e.exports=require("fs")},function(e,t,n){e.exports=n(2)},function(e,t,n){"use strict";const i=n(0),s=n(3),{castToDataFlags:r}=n(4),o=n(5),{ResolveLnkException:a}=n(6);function f(e){let t={};try{let n=76;Buffer.alloc(n).set(e.subarray(0,n),0);const i=e.readInt32LE(20);let s=r(i);t.flags=s;const a=e.readInt16LE(n);n+=2,n=a+n;const f=e.readInt32LE(n),c=Buffer.alloc(f);c.set(e.subarray(n,n+f),0);const l=c.readInt32LE(4),u=c.readInt32LE(16);let d=o("ascii",c,u,c.length-u);const p=c.readInt32LE(24);t.commonPathOffset=p;let h=o("ascii",c,p,c.length-p);if(l>28){const e=c.readInt32LE(28);d=o("utf16le",c,e,c.length-e)}if(l>32){const e=c.readInt32LE(32);h=o("utf16le",c,e,c.length-e)}return d+h}catch(e){throw new a(t,e)}}const c=s.promisify(i.readFile);e.exports={resolveBuffer:f,resolve:async e=>f(await c(e)),ResolveLnkException:a}},function(e,t){e.exports=require("util")},function(e,t){var n;e.exports={castToDataFlags:(n=[{name:"HasTargetIdList",offset:0,description:"The shell link is saved with an item ID list (IDList). If this bit is set, a\nLinkTargetIDList structure (section 2.2) MUST follow the ShellLinkHeader.\nIf this bit is not set, this structure MUST NOT be present.\n"},{name:"HasLinkInfo",offset:1,description:"The shell link is saved with link information. If this bit is set, a LinkInfo\nstructure (section 2.3) MUST be present. If this bit is not set, this structure\nMUST NOT be present.\n"},{name:"HasName",offset:2,description:"The shell link is saved with a name string. If this bit is set, a\nNAME_STRING StringData structure (section 2.4) MUST be present. If\nthis bit is not set, this structure MUST NOT be present."},{name:"HasRelativePath",offset:3,description:"The shell link is saved with a relative path string. If this bit is set, a\nRELATIVE_PATH StringData structure (section 2.4) MUST be present. "},{name:"HasWorkingDir",offset:4,description:"The shell link is saved with a working directory string. If this bit is set, a\nWORKING_DIR StringData structure (section 2.4) MUST be present."},{name:"HasArguments",offset:5,description:"The shell link is saved with command line arguments. If this bit is set, a\nCOMMAND_LINE_ARGUMENTS StringData structure (section 2.4) MUST\nbe present. "},{name:"HasIconLocation",offset:6,description:""},{name:"IsUnicode",offset:7,description:"The data strings in the LNK file are stored in Unicode (UTF-16 little-endian) instead of ASCII"},{name:"ForceNoLinkInfo",offset:8,description:"The location information is ignored"}],e=>Object.entries(n).reduce((t,[n,i])=>(t[i.name]=!!(e&i.offset),t),{}))}},function(e,t,n){n(0);e.exports=function(e,t,n,i){return t.toString(e,n,n+i).split("\0")[0]}},function(e,t){e.exports.ResolveLnkException=function(e,t){this.name="ResolveLnkException",this.bag=e,this.error=t}}])}));